locals {
  name = var.name != "" ? var.name : var.hostname

  backend_name = var.backend_name != "" ? var.backend_name : "${var.hostname} - backend"
  ssl_hostname = var.ssl_hostname != "" ? var.ssl_hostname : var.hostname

  vcl_exoscale_forward        = templatefile("${path.module}/vcl/exoscale_forward.vcl", { hostname = replace(var.app_hostname, ".", "-") })
  vcl_recv_various_fixups     = file("${path.module}/vcl/recv_misc_fixups.vcl")
  vcl_remove_response_headers = file("${path.module}/vcl/remove_response_headers.vcl")
  vcl_segmented_caching       = file("${path.module}/vcl/segmented_caching.vcl")
}

resource "fastly_service_vcl" "files_service" {
  name = local.name

  http3          = true
  stale_if_error = true

  domain {
    name = var.hostname
  }

  backend {
    name    = local.backend_name
    address = var.backend_address

    keepalive_time    = 0
    override_host     = local.ssl_hostname
    port              = 443
    shield            = var.shield_region
    ssl_check_cert    = var.backend_ssl_check
    ssl_cert_hostname = var.backend_ssl_check ? local.ssl_hostname : ""
    ssl_sni_hostname  = local.ssl_hostname
    use_ssl           = true
  }

  # Set custom Fastly purge rules

  condition {
    name      = "Purge"
    statement = "req.request == \"FASTLYPURGE\""
    type      = "REQUEST"
    priority  = 10
  }

  header {
    name        = "Fastly Purge"
    action      = "set"
    destination = "http.Fastly-Purge-Requires-Auth"
    type        = "request"

    priority          = 10
    request_condition = "Purge"
    source            = "\"1\""
  }

  # Additional headers for content security & nosniff

  header {
    name     = "Content security policy"
    action   = "set"
    type     = "request"
    priority = 10

    destination = "http.Content-Security-Policy"
    source      = "\"default-src 'none'; form-action 'none'\""
  }

  header {
    name     = "Nosniff"
    action   = "set"
    type     = "request"
    priority = 10

    destination = "http.X-Content-Type-Options"
    source      = "\"nosniff\""
  }



  # Force TLS/HSTS settings
  # Creates similar objects to what the GUI switch creates.

  dynamic "request_setting" {
    for_each = var.force_tls_hsts ? [1] : []
    content {
      name = "Generated by force TLS and enable HSTS"

      bypass_busy_wait = false
      force_miss       = false
      force_ssl        = true
      max_stale_age    = 0
      timer_support    = false
      xff              = ""
    }
  }

  dynamic "header" {
    for_each = var.force_tls_hsts ? [1] : []
    content {
      action      = "set"
      destination = "http.Strict-Transport-Security"
      name        = "Generated by force TLS and enable HSTS"
      type        = "response"

      ignore_if_set = false
      priority      = 100
      source        = "\"max-age=${var.hsts_duration}\""
    }
  }

  # Custom VCL snippets

  snippet {
    name     = "Enable segmented caching"
    content  = local.vcl_segmented_caching
    type     = "recv"
    priority = 100
  }

  snippet {
    name     = "Recv Various Fixups"
    content  = local.vcl_recv_various_fixups
    type     = "recv"
    priority = 100
  }

  snippet {
    name     = "Rewrite request to Exoscale"
    content  = local.vcl_exoscale_forward
    type     = "miss"
    priority = 100
  }

  snippet {
    name     = "Remove headers from origin response"
    content  = local.vcl_remove_response_headers
    type     = "fetch"
    priority = 100
  }

  # Additional products
  product_enablement {
    brotli_compression = false
    domain_inspector   = false
    image_optimizer    = false
    origin_inspector   = false
    websockets         = false
  }
}
